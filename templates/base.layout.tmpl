{{define "base"}}
<!doctype html>
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Bookings App</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.3/dist/css/datepicker.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10.15.5/dist/sweetalert2.min.css">

  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">Navbar</a>
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarSupportedContent"
          aria-controls="navbarSupportedContent"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a class="nav-link active" aria-current="page" href="/"
                >Home</a
              >
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/about">About</a>
            </li>
            <li class="nav-item dropdown">
              <a
                class="nav-link dropdown-toggle"
                href="#"
                role="button"
                data-bs-toggle="dropdown"
                aria-expanded="false"
              >
                Rooms
              </a>
              <ul class="dropdown-menu">
                <li>
                  <a class="dropdown-item" href="/general"
                    >General's Quarters</a
                  >
                </li>
                <li>
                  <a class="dropdown-item" href="/suite">Major's Suite</a>
                </li>
              </ul>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/search-availability">Book Now</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/contact">Contact</a>
            </li>
            <li class="nav-item">
              {{if eq .IsAuthenticated 1}}
                <li class="nav-item dropdown">
                <a
                  class="nav-link dropdown-toggle"
                  href="#"
                  role="button"
                  data-bs-toggle="dropdown"
                  aria-expanded="false"
                >
                  Admin
                </a>
                <ul class="dropdown-menu">
                    <li>
                      <a class="dropdown-item" href="/admin/dashboard"
                        >Dashboard</a
                      >
                    </li>
                    <li>
                      <a class="dropdown-item" href="/user/logout">Logout</a>
                    </li>
                  </ul>
                </li>
                <a class="nav-link" href="/user/logout" tabindex="-1" >Logout</a>
              {{else}}
                <a class="nav-link" href="/user/login" tabindex="-1" >Login</a>
              {{end}}
            </li>
          </ul>
        </div>
      </div>
    </nav>

    {{ block "content" .}}{{ end }}

    <footer class="my-footer">
        <div class="row">
            <div class="col">
                left
            </div>

            <div class="col">
                center
            </div>

            <div class="col">
                right
            </div>
        </div>
    </footer>

    <script
      src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
      integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"
      integrity="sha384-fbbOQedDUMZZ5KreZpsbe1LCZPVmfTnH7ois6mU1QK+m14rQ1l2bGBq41eYeM/fS"
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.3/dist/js/datepicker-full.min.js"></script>
    <script src="https://unpkg.com/notie"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    {{block "js" .}}

    {{end}}
    <script>      
      let attention = Prompt()
      
      console.log("Hello World");
      (() => {
          'use strict'
          window.addEventListener('load', function(){
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.from(forms).forEach(form => {
              form.addEventListener('submit', event => {
                if (!form.checkValidity()) {
                  event.preventDefault()
                  event.stopPropagation()
                }

                form.classList.add('was-validated')
              }, false)
            })
          })
        
      })()
    

      function notify(msg, msgType) {
            notie.alert({
                type: msgType,
                text: msg,
            })
        }

      function notifyModal(title, text, icon, confirmationButtonText) {
            Swal.fire({
                title: title,
                html: text,
                icon: icon,
                confirmButtonText: confirmationButtonText
            })
      }

      {{with .Error}}
        notify("{{.}}", "error");
      {{end}}

      {{with .Flash}}
        notify("{{.}}", "success");
      {{end}}

      {{with .Warning}}
        notify("{{.}}", "warning");
      {{end}}

      function Prompt() {
        let toast = function(c) {
          const{
            msg = "",
            icon = "success",
            position = "top-end"
          } = c

          let Toast  = Swal.mixin({
          toast: true,
          position: 'top-end',
          showConfirmButton: false,
          timer: 3000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.addEventListener('mousenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
          })

          Toast.fire({})
        }
        

        let success = function(c) {
          const{
            msg ="",
            title = "",
            footer = ""
          } = c

          Swal.fire({
            icon: 'success',
            title: title,
            text: msg,
            footer: footer
          })
        }

        let error = function(c) {
          const{
            msg ="",
            title = "",
            footer = ""
          } = c

          Swal.fire({
            icon: 'error',
            title: title,
            text: msg,
            footer: footer
          })
        }

        async function custom(c) {
          const{
            icon ="",
            msg = "",
            title ="",
            showConfirmButton=true,
          } = c

        const { value: result } = await Swal.fire({
          icon: icon,
          title: title,
          html: msg,
          backdrop: false,
          focusConfirm: false,
          showCancelButton: true,
          showConfirmButton: showConfirmButton,
          willOpen: () => {
            if(c.willOpen !== undefined) {
              c.willOpen()
            }
             
          },
          preConfirm: () => {
            return [
              document.getElementById('start').value,
              document.getElementById('end').value
            ]
          },
          didOpen: () => {
            if(c.didOpen !== undefined) {
              c.didOpen()
            }
            
          }
        })

        if(result) {
          if (result.dismiss !== Swal.DismissReason.cancel) {
            if(result.value !== "") {
              if(c.callback !== undefined) {
                c.callback(result)
              }
            } else {
              c.callback(false)
            }
          } else {
              c.callback(false)
          }
        }

      }

        return {toast, success, error, custom}
      }

      
    </script>
  </body>
</html>

{{end}}